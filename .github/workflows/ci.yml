
name: Deep CI/CD Pipeline

on:
  push:
    branches: [main, develop, itirations]
  pull_request:
    branches: [main, develop]

jobs:
  lint-typecheck-build:
    name: Lint, Type Check, Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Run TypeScript check
        run: npm run type-check
      - name: Build Next.js app
        run: npm run build
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_APP_URL: https://hostilian.org
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next
          retention-days: 7

  test-e2e:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    needs: lint-typecheck-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Run Playwright E2E tests
        run: npm run test:e2e

  accessibility:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    needs: lint-typecheck-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run axe accessibility checks
        run: npx playwright test --project=accessibility

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: lint-typecheck-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install Lighthouse
        run: npm install -g lighthouse
      - name: Run Lighthouse audit
        run: lighthouse http://localhost:3000 --output html --output json --chrome-flags="--headless" || true
        continue-on-error: true
      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse*

  seo:
    name: SEO & Sitemap Check
    runs-on: ubuntu-latest
    needs: lint-typecheck-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check meta tags and sitemap
        run: |
          grep -q '<meta name="description"' .next/**/*.html && echo "Meta description found" || exit 1
          grep -q '<meta property="og:' .next/**/*.html && echo "OpenGraph tags found" || exit 1
          test -f public/sitemap.xml && echo "Sitemap found" || exit 1

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [lint-typecheck-build, test-e2e, accessibility, lighthouse, seo]
    environment:
      name: production
      url: https://hostilian.org
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ secrets.TOKENVERCEL }}
      - name: Build project artifacts
        run: vercel build --prod --token=${{ secrets.TOKENVERCEL }}
      - name: Deploy to Vercel production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.TOKENVERCEL }}
      - name: Send deployment notification
        if: success()
        run: |
          echo "ðŸš€ Successfully deployed to production: https://hostilian.org"
